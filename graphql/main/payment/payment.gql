extend type Query {
    payments: [Payment!]! @field(resolver: "Payment\\PaymentsQuery")
    payment(id: ID! @eq): Payment @first

    # paymentRecord query
    paymentRecords(
        klase_id: Int!
        session_id: Int!
        term_id: Int!
    ): [PaymentRecord!]! @field(resolver: "Payment\\PaymentRecordsQuery")

    paidPaymentRecords(
        klase_id: Int!
        session_id: Int!
        term_id: Int!
    ): [PaymentRecord!]! @field(resolver: "Payment\\PaidPaymentRecordsQuery")

    # student

    studentPaymentRecords(
        student_id: Int!
        session_id: Int!
        term_id: Int!
        status: String! @eq
    ): PaymentRecord @first
}

extend type Mutation {
    createPayment(
        amount: Int @rules(apply: ["required"])
        klase: String!
        term_id: Int!
        session_id: Int!
    ): Payment @field(resolver: "Payment\\CreatePaymentMutator")

    updatePayment(id: ID!, amount: Int @rules(apply: ["required"])): Payment
        @field(resolver: "Payment\\UpdatePaymentMutator")

    # paymentRecord
    createPaymentRecord(id: ID!, amt_paid: Int!): PaymentRecord
        @field(resolver: "Payment\\CreatePaymentRecordMutator")

    resetPaymentRecord(id: ID!): PaymentRecord
        @field(resolver: "Payment\\ResetPaymentRecordMutator")

    CreateStudentPayment(
        student_id: Int!
        session_id: Int!
        term_id: Int!
        amt_paid: Int!
    ): PaymentRecord @field(resolver: "Payment\\StudentPaymentMutator")
}
